#!/usr/bin/env python3
import sys

# Min and Max numbers in the lottery
MAX = 2000000000
MIN = 1

# Function to generate a winner number with the seed's value
def next(seed):
	# Change of the seed
	seed = seed * seed + seed

	# Truncation of the seed
	if (seed > 0xFFFFFFFF):
		seed = int(hex(seed)[-8:], 16)

	# Return of [new seed, new winner number]
	return [seed, seed % (MAX - MIN) + MIN]



# Function that obtains the seed value of the lottery with a number generated by it
def obtain_seed(number):
    seed = 0
    # Bruteforce of the seed value in order to reach the same number generated by the lottery with the next() function 
    for i in range(0x1337, 0xFFFFFFFF):
        seed = i
        generated_num = next(seed)[1]
        # If the generated number is the same as the lottery's number, show the seed and exit the loop 
        if generated_num == number:
            print("Seed: " + str(seed))
            break
    return seed

# Generate a sequence of 100 predicted numbers from an initial winner number of the lottery
def generate_sequence(num):
	# Obtain the current seed used by the lottery 
    seed = obtain_seed(num)

    # Using the seed, predict the next 100 numbers
    for i in range(100):
        seed, generated_number = next(seed)
        print(generated_number)



# If arguments are 2, execute the exploit. Else, show instructions
if len(sys.argv) != 2:
    print("Usage: py " + sys.argv[0] + " <Winner number from the lottery>")
    exit(1)

# Generate a sequence of 100 predicted numbers from a winner number
generate_sequence(int(sys.argv[1]))